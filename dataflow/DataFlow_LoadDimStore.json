{
	"name": "DataFlow_LoadDimStore",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DataSet_cfg_datalake_csv",
						"type": "DatasetReference"
					},
					"name": "DataFromTransactionCSVFile"
				},
				{
					"dataset": {
						"referenceName": "ds_dimstore",
						"type": "DatasetReference"
					},
					"name": "SourceDimStore"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_dimstore",
						"type": "DatasetReference"
					},
					"name": "InsertIntoDimStore"
				}
			],
			"transformations": [
				{
					"name": "GroupByStoreType"
				},
				{
					"name": "GetStoresNotInDimStore"
				}
			],
			"scriptLines": [
				"source(output(",
				"          transaction_id as string,",
				"          cust_id as string,",
				"          tran_date as string,",
				"          prod_subcat_code as string,",
				"          prod_cat_code as string,",
				"          Qty as string,",
				"          Rate as string,",
				"          Tax as string,",
				"          total_amt as string,",
				"          Store_type as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DataFromTransactionCSVFile",
				"source(output(",
				"          store_key as integer,",
				"          store_type as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> SourceDimStore",
				"DataFromTransactionCSVFile aggregate(groupBy(Store_type),",
				"     count = count(transaction_id)) ~> GroupByStoreType",
				"GroupByStoreType, SourceDimStore exists(GroupByStoreType@Store_type == SourceDimStore@store_type,",
				"     negate:true,",
				"     broadcast: 'auto')~> GetStoresNotInDimStore",
				"GetStoresNotInDimStore sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          store_key as integer,",
				"          store_type as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     preSQLs:['\\ndelete from [stage].[dim_store];'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          store_type = Store_type",
				"     )) ~> InsertIntoDimStore"
			]
		}
	}
}