{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "df-create-customer-trans-edw"
		},
		"SqlServer_autoResolve_IR_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SqlServer_autoResolve_IR'"
		},
		"datalakestorage_stage_lined_service_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'datalakestorage_stage_lined_service'"
		},
		"sql_serv_on_vm_linked_service_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'sql_serv_on_vm_linked_service'"
		},
		"datalakestorage_stage_lined_service_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://stogareacctdp203.dfs.core.windows.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pl-load-data-into-datalake')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "move data from various source into azure data lake gen 2 - use incremental load.",
				"activities": [
					{
						"name": "get-cfg-records",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "source_cfg",
								"value": "source.cfg table"
							}
						],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select * from source.cfg where enabled = 1",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_cfg",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "get_sqldb_rows",
						"description": "get only the sqldb table type records",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "get-cfg-records",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('get-cfg-records').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().source, 'SQLDB')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "get_file_rows",
						"description": "get only the file type records",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "get-cfg-records",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('get-cfg-records').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().source, 'File')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "foreach_sqldb_rec",
						"description": "for each sqldb type record",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "get_sqldb_rows",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('get_sqldb_rows').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@bool(equals(item().load_type, 'incremental'))",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Full data copy",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"sqlReaderQuery": "\r\nselect * from @{item().source_table};",
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": true,
															"fileExtension": ".txt"
														}
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "dataset_cfg",
														"type": "DatasetReference",
														"parameters": {}
													}
												],
												"outputs": [
													{
														"referenceName": "DataSet_cfg_datalake_csv",
														"type": "DatasetReference",
														"parameters": {
															"filename": {
																"value": "@{item().dest_table}",
																"type": "Expression"
															}
														}
													}
												]
											}
										],
										"ifTrueActivities": [
											{
												"name": "copy_sqldb_type_data",
												"description": "copy sqldb type data from source i.e. sql server to sink i.e. data lake gen 2",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"sqlReaderQuery": {
															"value": "select * from @{item().source_table} where convert(datetime, @{item().watermark_col}, 105) > convert(datetime, '@{item().watermark_val}')",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": true,
															"fileExtension": ".txt"
														}
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "dataset_cfg",
														"type": "DatasetReference",
														"parameters": {}
													}
												],
												"outputs": [
													{
														"referenceName": "DataSet_cfg_datalake_csv",
														"type": "DatasetReference",
														"parameters": {
															"filename": "@{item().dest_table}"
														}
													}
												]
											},
											{
												"name": "dataflow_update_watermark_val",
												"type": "ExecuteDataFlow",
												"dependsOn": [
													{
														"activity": "copy_sqldb_type_data",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataflow": {
														"referenceName": "update_watermark_value",
														"type": "DataFlowReference",
														"parameters": {
															"file_name": {
																"value": "'@{item().dest_table}'",
																"type": "Expression"
															},
															"watermark_field": {
																"value": "'@{item().watermark_col}'",
																"type": "Expression"
															},
															"source_data_date_format": {
																"value": "'@{item().source_data_date_format}'",
																"type": "Expression"
															}
														},
														"datasetParameters": {
															"source1": {
																"filename": {
																	"value": "@{item().dest_table}",
																	"type": "Expression"
																}
															},
															"sink1": {}
														}
													},
													"staging": {},
													"compute": {
														"coreCount": 8,
														"computeType": "General"
													},
													"traceLevel": "Fine"
												}
											}
										]
									}
								},
								{
									"name": "update status",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "If Condition1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": "\nupdate source.cfg set status = 'success' where dest_table = '@{item().dest_table}';\nselect 1;\n",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "dataset_cfg",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-08-30T02:00:31Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_cfg')]",
				"[concat(variables('factoryId'), '/datasets/DataSet_cfg_datalake_csv')]",
				"[concat(variables('factoryId'), '/dataflows/update_watermark_value')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataSet_cfg_datalake_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "datalakestorage_stage_lined_service",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string",
						"defaultValue": "filename_notset"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": "stage",
						"fileSystem": "ckcontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/datalakestorage_stage_lined_service')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServer_source_cfg_autoresolveIR')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServer_autoResolve_IR",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "source",
						"type": "nvarchar"
					},
					{
						"name": "source_table",
						"type": "varchar"
					},
					{
						"name": "dest_table",
						"type": "varchar"
					},
					{
						"name": "source_cols_for_staging",
						"type": "varchar"
					},
					{
						"name": "watermark_col",
						"type": "varchar"
					},
					{
						"name": "watermark_val",
						"type": "varchar"
					},
					{
						"name": "enabled",
						"type": "bit"
					},
					{
						"name": "load_type",
						"type": "varchar"
					},
					{
						"name": "status",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "source",
					"table": "cfg"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServer_autoResolve_IR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataset_cfg')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sql_serv_on_vm_linked_service",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "source",
						"type": "nvarchar"
					},
					{
						"name": "source_table",
						"type": "varchar"
					},
					{
						"name": "dest_table",
						"type": "varchar"
					},
					{
						"name": "source_cols_for_staging",
						"type": "varchar"
					},
					{
						"name": "watermark_col",
						"type": "varchar"
					},
					{
						"name": "watermark_val",
						"type": "varchar"
					},
					{
						"name": "enabled",
						"type": "bit"
					},
					{
						"name": "load_type",
						"type": "varchar"
					},
					{
						"name": "status",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "source",
					"table": "cfg"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sql_serv_on_vm_linked_service')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServer_autoResolve_IR')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('SqlServer_autoResolve_IR_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/datalakestorage_stage_lined_service')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('datalakestorage_stage_lined_service_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('datalakestorage_stage_lined_service_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_serv_on_vm_linked_service')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('sql_serv_on_vm_linked_service_connectionString')]"
				},
				"connectVia": {
					"referenceName": "self-hosted-integration-runtime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/self-hosted-integration-runtime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/self-hosted-integration-runtime')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/update_watermark_value')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DataSet_cfg_datalake_csv",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SqlServer_source_cfg_autoresolveIR",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     file_name as string,",
						"     watermark_field as string,",
						"     source_data_date_format as string",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 aggregate(max_date = iif(toString($file_name) == 'customer.csv',\r",
						"    max(toTimestamp(toString(byName($watermark_field)), 'dd-MM-yyyy HH:mm')),\r",
						"    max(toTimestamp(byName($watermark_field), 'dd-MM-yyyy'))\r",
						")) ~> aggregate1",
						"aggregate1 derive(table_name = $file_name) ~> derivedColumn1",
						"derivedColumn1 alterRow(updateIf(isNull(max_date)==false())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          source as string,",
						"          source_table as string,",
						"          dest_table as string,",
						"          source_cols_for_staging as string,",
						"          watermark_col as string,",
						"          watermark_val as string,",
						"          enabled as boolean,",
						"          load_type as string,",
						"          status as string",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['dest_table'],",
						"     skipKeyWrites:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          dest_table = table_name,",
						"          watermark_val = max_date",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DataSet_cfg_datalake_csv')]",
				"[concat(variables('factoryId'), '/datasets/SqlServer_source_cfg_autoresolveIR')]"
			]
		}
	]
}